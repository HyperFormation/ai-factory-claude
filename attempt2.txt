I want to setup a Claude Code based repository that will function as an software AI factory. 

What is my vision of an AI factory? A coding agent built on the claude code platform that will have a standardized way to track PRDs, tasks and have knowledge about a project's goals, scope and current status. Using sub-agents it will be able to run loops where agents work and check work in order to develop software in a way that meets established standards, requirements, architecture, scope. 


Goal

Create a repeatable AI factory setup that:

Tracks PRDs, tasks, and implementation status

Maintains persistent project context (scope, architecture, goals)

Uses sub-agents and slash commands to coordinate planning → coding → testing → documentation loops

Project Structure

1. .claude/ folder

Create the following files for persistent context and configuration:

.claude/
  project/
    overview.md                # High-level project description, goals, vision
    architecture.md            # Tech stack, standards, conventions
    status.json                # Current progress summary and recent changes
    permissions.json           # Claude Code agent capabilities and limits


2. agents/ folder

Define the following sub-agents (.md files, Claude format):

PRD Writer

Planner

Coder

Designer (not an actual designer, but agent in charge of keeping interfaces looking consistent, making sure UI is built consistently and using the same components, patterns and colors. It basically ensures a consistent visual design across the project and across all tasks)

Tester

Git Manager (manages making branches for each task, tagging them with the PRD they are part of, reviewing git history when other flows need that, getting data for summaries and tasks list)

Each agent file should include:

Role: [Agent Name]
Task: [Primary objective]
Steps:
1. [Action 1...]
2. [Action 2...]
...


Reference other agents or docs via $refs or $imports per Claude best practices.

3. PRDs/ folder

A PRD folder containing folders named by each PRD using the format "PRD-{number}". In each of these folders we would have a prd.md file generated by the "PRD Writer" subagent, along with a tasks.md file that has a list of tasks and their status, branch, commits in json format. Each task has its own file named witht the task ID in the format "TASK-{number}.md". The task files each contain a plan of how to implement the task based on the PRD and other data as created by the Planner subagent. 

PRDs/
  PRD-001/
    prd.md           # Written by PRD Writer agent
    tasks.json       # Task list (task_id, status, branch, commits)
    plan.md  # Overarching plan containing an overview and list of tasks with id and short description. Written by first pass of the planner subagent. 
    TASK-001.md      # Individual task plan from Planner subgagent


4. slash_commands/ folder

Each slash command (.md file) should describe inputs, outputs, and workflow steps.

/prd: Generate a PRD and acceptance criteria, create PRD folder.

/plan: Generate plan + tasks from PRD. Call it once to make the plan from the prd, call it repeatedly for each task it makes in the plan to write up a plan of implementation for each task. 

/build: Implement a task end-to-end (review task plan + prd → code → test → refine).

Each command should specify:

Inputs: $PRD or $Task reference
Outputs: Created/updated files and next command to run
Permissions: [sub-agents involved]

Expected Workflow Loop

/prd → Create a PRD folder and prd.md

/plan → Generate plan + tasks under that PRD

/build → Coder + Designer + Tester run iterative loops until tests pass

Git Manager updates status.json and commits results

Output

Return:

The repository tree

The initial version of all .claude/project files (scaffolded with headers)

Sub-agent definitions (template versions)

Slash command definitions

Note: All the code that is worked on should be in a subfolder called repositories. Each repository is a folder in there. Sometimes projects have multiple repositories, sometimes just one. All the actual implementation code should be made in the repository. 